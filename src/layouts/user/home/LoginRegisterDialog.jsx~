import React, { useState,  } from 'react';
import { Box, Dialog, Grid, Typography, TextField, Button, InputAdornment, IconButton } from '@mui/material';
import { MuiTelInput } from 'mui-tel-input';
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';
import ClearIcon from '@mui/icons-material/Clear';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { parsePhoneNumber } from 'libphonenumber-js';
import AuthService from '../../../services/authService.js';
import { toast } from 'react-toastify';
import { useNavigate } from "react-router";

// Helper function to normalize phone number by removing country code
const normalizePhoneNumber = (phone) => {
    try {
        const phoneNumber = parsePhoneNumber(phone || '');
        if (phoneNumber && phoneNumber.isValid()) {
            return phoneNumber.nationalNumber;
        }
        return phone;
    } catch {
        return phone;
    }
};

// Yup validation schema for phone number
const phoneValidationSchema = Yup.string()
    .required('Bắt buộc')
    .test('valid-phone', 'Số điện thoại không hợp lệ', (value) => {
        try {
            const phoneNumber = parsePhoneNumber(value || '');
            return phoneNumber.isValid();
        } catch {
            return false;
        }
    });

// Custom password validation
const passwordValidationSchema = Yup.string()
    .required('Mật khẩu là bắt buộc')
    .min(6, 'Mật khẩu phải có ít nhất 6 ký tự')
    .matches(/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/, 'Mật khẩu phải chứa cả chữ và số');

const LoginRegisterDialog = ({ open, onClose, tabValue, handleTabChange }) => {
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const navigate = useNavigate(); // Khởi tạo useNavigate để điều hướng


    const handleClickShowPassword = () => setShowPassword(!showPassword);
    const handleClickShowConfirmPassword = () => setShowConfirmPassword(!showConfirmPassword);

    // Đăng ký
    const registerFormik = useFormik({
        initialValues: {
            phone: '',
            password: '',
            confirmPassword: '',
        },
        validationSchema: Yup.object({
            phone: phoneValidationSchema,
            password: passwordValidationSchema,
            confirmPassword: Yup.string()
                .required('Xác nhận mật khẩu là bắt buộc')
                .oneOf([Yup.ref('password'), null], 'Mật khẩu xác nhận không khớp'),
        }),
        onSubmit: async (values, { setSubmitting, setErrors }) => {
            try {
                const normalizedPhone = normalizePhoneNumber(values.phone);
                const userData = {
                    phoneNumber: normalizedPhone,
                    password: values.password,
                };
                const response = await AuthService.register(userData);
                toast.success(response.message || 'Đăng ký thành công!');
                onClose();
            } catch (error) {
                toast.error(error.error || 'Đăng ký thất bại. Vui lòng thử lại.');
                setErrors({ phone: error.error || 'Đăng ký thất bại, vui lòng thử lại' });
                console.error('Register error:', error);
            }
            setSubmitting(false);
        },
    });

    // Đăng nhập
    const loginFormik = useFormik({
        initialValues: {
            phoneNumber: '',
            password: '',
        },
        validationSchema: Yup.object({
            phoneNumber: phoneValidationSchema,
            password: passwordValidationSchema,
        }),
        onSubmit: async (values, { setSubmitting, setErrors, resetForm }) => {
            try {
                const normalizedPhone = normalizePhoneNumber(values.phoneNumber);
                const response = await AuthService.login(normalizedPhone, values.password);

                // Kiểm tra và lưu toàn bộ thông tin người dùng vào localStorage
                if (response.token) {
                    localStorage.setItem('user', JSON.stringify(response)); // Lưu toàn bộ response
                    localStorage.setItem('authToken', response.token); // Lưu token riêng
                    toast.success(response.message || 'Đăng nhập thành công!');
                    onClose();
                    resetForm(); // Xóa dữ liệu trong các ô nhập liệu
                    // Điều hướng về /home và tải lại trang
                    navigate('/home');
                    window.location.reload(); // Tải lại trang để cập nhật giao diện
                } else {
                    console.warn('Không nhận được token từ phản hồi');
                    toast.error('Đăng nhập thất bại. Vui lòng thử lại.');
                }
            } catch (error) {
                toast.error(error.error || 'Đăng nhập thất bại. Vui lòng kiểm tra số điện thoại hoặc mật khẩu.');
                setErrors({ phoneNumber: error.error || 'Số điện thoại hoặc mật khẩu không đúng' });
                console.error('Login error:', error);
            }
            setSubmitting(false);
        },
    });



    return (
        <Dialog
            open={open}
            onClose={onClose}
            fullScreen
            sx={{
                '& .MuiDialog-paper': {
                    backgroundColor: 'rgba(0,0,0,0.5)',
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                },
            }}
        >
            <Box
                sx={{
                    width: '830px',
                    height: '430px',
                    maxWidth: '90vw',
                    borderRadius: 3,
                    bgcolor: '#eeeef1',
                    p: 2,
                    boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
                    position: 'relative',
                    backgroundImage: 'url("https://th.bing.com/th/id/R.71edbc386a6f536709aaf9336d892362?rik=7eig%2bjHBZN%2fuYg&riu=http%3a%2f%2fn.sinaimg.cn%2fsinacn%2fw819h472%2f20180125%2f0a24-fyqwiqk6670633.png&ehk=rcI08Cc7Pxg9qlRfXwrp%2fKiChoENLBJYBePwMvdH1I0%3d&risl=&pid=ImgRaw&r=0")',
                    backgroundSize: 'cover',
                    backgroundPosition: 'center',
                    backgroundRepeat: 'no-repeat',
                }}
            >
                <IconButton
                    aria-label="close"
                    onClick={onClose}
                    sx={{
                        position: 'absolute',
                        right: 8,
                        top: 8,
                        color: '#fff',
                    }}
                >
                    <Box sx={{ width: 24, height: 24, borderRadius: '50%', bgcolor: '#818181', display: 'flex', justifyContent: 'center', alignItems: 'center', fontSize: '16px' }}>
                        <ClearIcon />
                    </Box>
                </IconButton>

                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2, bgcolor: '#eeeef1', width: '100%', height: '100%' }}>
                    <Grid container sx={{ height: '100%' }}>
                        <Grid
                            item
                            xs={3.6}
                            sx={{
                                bgcolor: '#eeeef1',
                                p: 2,
                                display: 'flex',
                                flexDirection: 'column',
                                alignItems: 'center',
                                justifyContent: 'flex-start',
                                width: '300px',
                                marginLeft: '10px',
                                marginTop: '30px',
                                height: '320px',
                                position: 'relative',
                            }}
                        >
                            <Box>
                                <Typography variant="body2" color="black" sx={{ mb: 1, fontSize: '16px', textAlign: 'center' , userSelect: 'none',
                                    pointerEvents: 'auto'}}>
                                    Đăng nhập bằng QR Code app
                                </Typography>
                            </Box>
                            <Box
                                sx={{
                                    height: '150px',
                                    width: '150px',
                                    bgcolor: '#939393',
                                    marginTop: '20px',
                                    borderRadius: '4px',
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                }}
                            >
                                <img
                                    src="https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=https://google.com"
                                    alt="QR Code"
                                    style={{ height: '100%', width: '100%', borderRadius: '4px' }}
                                />
                            </Box>
                            <Box sx={{ marginTop: '30px' }}>
                                <Typography variant="body2" color="black" sx={{ mb: '1px', fontSize: '14px', textAlign: 'center', userSelect: 'none',
                                    pointerEvents: 'auto' }}>
                                    Tải xuống app GOYI
                                </Typography>
                            </Box>
                            <Box
                                sx={{
                                    position: 'absolute',
                                    top: '10px',
                                    right: 0,
                                    height: '90%',
                                    width: '1px',
                                    backgroundColor: 'rgba(101,101,101,0.43)',
                                    marginTop: '20px',
                                }}
                            />
                        </Grid>

                        <Grid
                            item
                            xs={8.4}
                            sx={{ bgcolor: '#eeeef1', p: 2, display: 'flex', flexDirection: 'column', justifyContent: 'flex-center', width: '500px', height: '350px' }}
                        >
                            <Box
                                sx={{
                                    mb: 1,
                                    mt: '30px',
                                    width: '500px',
                                    display: 'flex',
                                    justifyContent: 'center',
                                    alignItems: 'center',
                                    textAlign: 'center',
                                    mx: 'auto',
                                }}
                            >
                                <Typography
                                    variant="h6"
                                    component="span"
                                    onClick={() => handleTabChange(null, 0)}
                                    sx={{
                                        cursor: 'pointer',
                                        minWidth: '140px',
                                        textAlign: 'center',
                                        '&:hover': { textDecoration: 'underline' },
                                        fontWeight: tabValue === 0 ? 'bold' : 'normal',
                                        textDecoration: tabValue === 0 ? 'underline' : 'none',
                                        fontSize: '16px',
                                        color: tabValue === 0 ? 'primary.main' : '#333333',
                                        userSelect: 'none',
                                        pointerEvents: 'auto'
                                    }}
                                >
                                    Đăng nhập Goyi
                                </Typography>
                                <Typography
                                    variant="h6"
                                    component="span"
                                    sx={{
                                        width: '30px',
                                        textAlign: 'center',
                                        fontSize: '16px',
                                    }}
                                >
                                    |
                                </Typography>
                                <Typography
                                    variant="h6"
                                    component="span"
                                    onClick={() => handleTabChange(null, 1)}
                                    sx={{
                                        cursor: 'pointer',
                                        minWidth: '140px',
                                        textAlign: 'center',
                                        '&:hover': { textDecoration: 'underline' },
                                        fontWeight: tabValue === 1 ? 'bold' : 'normal',
                                        textDecoration: tabValue === 1 ? 'underline' : 'none',
                                        fontSize: '16px',
                                        color: tabValue === 1 ? 'primary.main' : '#333333',
                                        userSelect: 'none',
                                        pointerEvents: 'auto'
                                    }}
                                >
                                    Đăng ký Goyi
                                </Typography>
                            </Box>

                            {tabValue === 1 && (
                                <Box
                                    component="form"
                                    onSubmit={registerFormik.handleSubmit}
                                    sx={{
                                        display: 'flex',
                                        flexDirection: 'column',
                                        mb: 1.5,
                                        p: 2,
                                        border: '1px solid #ccc',
                                        borderRadius: '8px',
                                        width: '82%',
                                        backgroundColor: '#fafafa',
                                        marginLeft: '30px',
                                    }}
                                >
                                    <MuiTelInput
                                        name="phone"
                                        value={registerFormik.values.phone}
                                        onChange={(value) => registerFormik.setFieldValue('phone', value)}
                                        onBlur={registerFormik.handleBlur}
                                        error={registerFormik.touched.phone && Boolean(registerFormik.errors.phone)}
                                        helperText={registerFormik.touched.phone && registerFormik.errors.phone}
                                        defaultCountry="VN"
                                        forceCallingCode
                                        disableFormatting
                                        placeholder="Nhập số điện thoại"
                                        sx={{
                                            mb: 2,
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '4px',
                                                height: '44px',
                                                '& input': {
                                                    paddingLeft: '1px',
                                                    fontSize: '16px',
                                                },
                                            },
                                            '& .MuiOutlinedInput-notchedOutline': {
                                                borderColor: '#ccc',
                                            },
                                        }}
                                        aria-label="Nhập số điện thoại"
                                    />
                                    <TextField
                                        name="password"
                                        type={showPassword ? 'text' : 'password'}
                                        value={registerFormik.values.password}
                                        onChange={registerFormik.handleChange}
                                        onBlur={registerFormik.handleBlur}
                                        error={registerFormik.touched.password && Boolean(registerFormik.errors.password)}
                                        helperText={registerFormik.touched.password && registerFormik.errors.password}
                                        sx={{
                                            mb: 2,
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '4px',
                                                height: '44px',
                                                '& input': {
                                                    fontSize: '16px',
                                                },
                                            },
                                            '& .MuiOutlinedInput-notchedOutline': {
                                                borderColor: '#ccc',
                                            },
                                        }}
                                        placeholder="Nhập mật khẩu"
                                        aria-label="Nhập mật khẩu"
                                        InputProps={{
                                            startAdornment: (
                                                <InputAdornment position="start" sx={{ mr: 2.5 }}>
                                                    <Box component="span" sx={{ fontSize: '16px', whiteSpace: 'nowrap', color: 'black' }}>
                                                        Mật khẩu
                                                    </Box>
                                                </InputAdornment>
                                            ),
                                            endAdornment: (
                                                <InputAdornment position="end">
                                                    <IconButton onClick={handleClickShowPassword} edge="end">
                                                        {showPassword ? <Visibility /> : <VisibilityOff />}
                                                    </IconButton>
                                                </InputAdornment>
                                            ),
                                        }}
                                    />
                                    <TextField
                                        name="confirmPassword"
                                        type={showConfirmPassword ? 'text' : 'password'}
                                        value={registerFormik.values.confirmPassword}
                                        onChange={registerFormik.handleChange}
                                        onBlur={registerFormik.handleBlur}
                                        error={registerFormik.touched.confirmPassword && Boolean(registerFormik.errors.confirmPassword)}
                                        helperText={registerFormik.touched.confirmPassword && registerFormik.errors.confirmPassword}
                                        sx={{
                                            mb: 2,
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '4px',
                                                height: '44px',
                                                '& input': {
                                                    fontSize: '16px',
                                                },
                                            },
                                            '& .MuiOutlinedInput-notchedOutline': {
                                                borderColor: '#ccc',
                                            },
                                        }}
                                        placeholder="Nhập lại mật khẩu"
                                        aria-label="Nhập lại mật khẩu"
                                        InputProps={{
                                            startAdornment: (
                                                <InputAdornment position="start" sx={{ mr: 2.5 }}>
                                                    <Box component="span" sx={{ fontSize: '16px', whiteSpace: 'nowrap', color: 'black' }}>
                                                        Xác nhận
                                                    </Box>
                                                </InputAdornment>
                                            ),
                                            endAdornment: (
                                                <InputAdornment position="end">
                                                    <IconButton onClick={handleClickShowConfirmPassword} edge="end">
                                                        {showConfirmPassword ? <Visibility /> : <VisibilityOff />}
                                                    </IconButton>
                                                </InputAdornment>
                                            ),
                                        }}
                                    />
                                    <Button
                                        variant="contained"
                                        color="primary"
                                        type="submit"
                                        disabled={registerFormik.isSubmitting}
                                        sx={{
                                            width: '200px',
                                            alignSelf: 'center',
                                            mt: 1,
                                            textTransform: 'none',
                                            fontSize: '16px',
                                            borderRadius: '6px',
                                        }}
                                    >
                                        {registerFormik.isSubmitting ? 'Đang xử lý...' : 'Đăng ký'}
                                    </Button>
                                </Box>
                            )}

                            {tabValue === 0 && (
                                <Box
                                    component="form"
                                    onSubmit={loginFormik.handleSubmit}
                                    sx={{
                                        display: 'flex',
                                        flexDirection: 'column',
                                        mb: 1.5,
                                        p: 2,
                                        border: '1px solid #ccc',
                                        borderRadius: '8px',
                                        width: '82%',
                                        backgroundColor: '#fafafa',
                                        marginLeft: '30px',
                                    }}
                                >
                                    <MuiTelInput
                                        name="phoneNumber"
                                        value={loginFormik.values.phoneNumber}
                                        onChange={(value) => loginFormik.setFieldValue('phoneNumber', value)}
                                        onBlur={loginFormik.handleBlur}
                                        error={loginFormik.touched.phoneNumber && Boolean(loginFormik.errors.phoneNumber)}
                                        helperText={loginFormik.touched.phoneNumber && loginFormik.errors.phoneNumber}
                                        defaultCountry="VN"
                                        forceCallingCode
                                        disableFormatting
                                        placeholder="Nhập số điện thoại"
                                        sx={{
                                            mb: 2,
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '4px',
                                                height: '44px',
                                                '& input': {
                                                    paddingLeft: '1px',
                                                    fontSize: '16px',
                                                },
                                            },
                                            '& .MuiOutlinedInput-notchedOutline': {
                                                borderColor: '#ccc',
                                            },
                                        }}
                                        aria-label="Nhập số điện thoại"
                                        InputProps={{
                                            startAdornment: (
                                                <InputAdornment position="start" sx={{ mr: 2.5 }}>
                                                    <Box component="span" sx={{ fontSize: '16px', whiteSpace: 'nowrap', color: 'black' }}>
                                                        Số điện thoại
                                                    </Box>
                                                </InputAdornment>
                                            ),
                                        }}
                                    />
                                    <TextField
                                        name="password"
                                        type={showPassword ? 'text' : 'password'}
                                        value={loginFormik.values.password}
                                        onChange={loginFormik.handleChange}
                                        onBlur={loginFormik.handleBlur}
                                        error={loginFormik.touched.password && Boolean(loginFormik.errors.password)}
                                        helperText={loginFormik.touched.password && loginFormik.errors.password}
                                        sx={{
                                            mb: 1,
                                            '& .MuiOutlinedInput-root': {
                                                borderRadius: '4px',
                                                height: '44px',
                                                '& input': {
                                                    fontSize: '16px',
                                                },
                                            },
                                            '& .MuiOutlinedInput-notchedOutline': {
                                                borderColor: '#ccc',
                                            },
                                        }}
                                        placeholder="Nhập mật khẩu"
                                        aria-label="Nhập mật khẩu"
                                        InputProps={{
                                            startAdornment: (
                                                <InputAdornment position="start" sx={{ mr: 2.5 }}>
                                                    <Box component="span" sx={{ fontSize: '16px', whiteSpace: 'nowrap', color: 'black' }}>
                                                        Mật khẩu
                                                    </Box>
                                                </InputAdornment>
                                            ),
                                            endAdornment: (
                                                <InputAdornment position="end">
                                                    <IconButton onClick={handleClickShowPassword} edge="end">
                                                        {showPassword ? <Visibility /> : <VisibilityOff />}
                                                    </IconButton>
                                                </InputAdornment>
                                            ),
                                        }}
                                    />
                                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2, mt: 1 }}>
                                        <Typography
                                            variant="body2"
                                            sx={{
                                                color: '#1976d2',
                                                cursor: 'pointer',
                                                textDecoration: 'underline',
                                                fontSize: '14px',
                                            }}
                                        >
                                            Quên mật khẩu?
                                        </Typography>
                                    </Box>
                                    <Button
                                        variant="contained"
                                        color="primary"
                                        type="submit"
                                        disabled={loginFormik.isSubmitting}
                                        sx={{
                                            alignSelf: 'center',
                                            textTransform: 'none',
                                            fontSize: '16px',
                                            borderRadius: '6px',
                                            width: '200px',
                                        }}
                                    >
                                        {loginFormik.isSubmitting ? 'Đang xử lý...' : 'Đăng nhập'}
                                    </Button>
                                </Box>
                            )}
                        </Grid>

                        <Grid item xs={12}>
                            <Box
                                sx={{
                                    display: 'flex',
                                    justifyContent: 'center',
                                    textAlign: 'center',
                                    px: 2,
                                    color: '#292929',
                                    fontSize: '14px',
                                    marginLeft: '170px',
                                    marginRight: '170px',
                                }}
                            >
                                <Typography variant="body2" sx={{ fontSize: '14px', lineHeight: 1.6 }}>
                                    Bằng cách đăng nhập hoặc đăng ký, bạn đồng ý với{' '}
                                    <Box
                                        component="span"
                                        sx={{ color: '#1976d2', cursor: 'pointer', textDecoration: 'underline' }}
                                        onClick={() => alert('Thỏa thuận người dùng')}
                                    >
                                        Thỏa thuận người dùng
                                    </Box>{' '}
                                    và{' '}
                                    <Box
                                        component="span"
                                        sx={{ color: '#1976d2', cursor: 'pointer', textDecoration: 'underline' }}
                                        onClick={() => alert('Chính sách bảo mật')}
                                    >
                                        Chính sách bảo mật
                                    </Box>.
                                </Typography>
                            </Box>
                        </Grid>
                    </Grid>
                </Box>
            </Box>
        </Dialog>
    );
};

export default LoginRegisterDialog;